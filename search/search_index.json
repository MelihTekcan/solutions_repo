{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Projectile motion is a fundamental concept in physics that describes the motion of an object launched into the air under the influence of gravity. This motion is characterized by a parabolic trajectory , and it is widely applicable in sports, engineering, and astrophysics. 1. Theoretical Foundation What is Projectile Motion? Projectile motion occurs when an object is launched with an initial velocity \\( \\(v_0\\) \\) at an angle \\( \\(\\theta\\) \\) to the horizontal. The motion is influenced only by gravity \\( \\(g\\) \\) , assuming no air resistance. The motion can be broken into two independent components: Horizontal Motion : The horizontal velocity remains constant because there is no horizontal acceleration. The horizontal position at time \\( \\(t\\) \\) is given by: $$ x(t) = v_0 \\cos(\\theta) \\cdot t $$ Vertical Motion : The vertical velocity decreases due to the acceleration caused by gravity. The vertical position at time \\( \\(t\\) \\) is given by: $$ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$ Key Equations Time of Flight : The total time the projectile spends in the air is: $$ T = \\frac{2 v_0 \\sin(\\theta)}{g} $$ Range : The horizontal distance traveled by the projectile is: $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ Maximum Height : The highest point reached by the projectile is: $$ H = \\frac{v_0^2 \\sin^2(\\theta)}{2g} $$ 2. Analysis of the Range How Does the Range Depend on the Angle of Projection? The range \\( \\(R\\) \\) depends on: - Initial Velocity ( ( \\(v_0\\) \\) ) : The range increases quadratically with \\( \\(v_0\\) \\) ( \\( \\(R \\propto v_0^2\\) \\) ). - Angle of Projection ( ( \\(\\theta\\) \\) ) : The range is maximized at \\( \\(\\theta = 45^\\circ\\) \\) . - Gravitational Acceleration ( ( \\(g\\) \\) ) : The range decreases as \\( \\(g\\) \\) increases ( \\( \\(R \\propto 1/g\\) \\) ). Key Observations The range is symmetric: $$ R(\\theta) = R(90^\\circ - \\theta) $$ For example, the range at \\( \\(\\theta = 30^\\circ\\) \\) is the same as at \\( \\(\\theta = 60^\\circ\\) \\) . The maximum range occurs at \\( \\(\\theta = 45^\\circ\\) \\) for flat terrain. Python Visualization: Range vs. Angle The following Python code generates a graph showing how the range varies with the angle of projection for different initial velocities: ```bash python Problem_1simulation.py 3. Practical Applications Real-World Scenarios Projectile motion has numerous real-world applications across various fields: Sports : In sports like soccer and golf, players adjust the angle of projection ( \\( \\(\\theta\\) \\) ) and the initial velocity ( \\( \\(v_0\\) \\) ) to achieve optimal range or height. For example: A soccer player might aim for a higher angle to clear a wall of defenders. A golfer adjusts the angle and velocity to maximize the distance of a drive. Engineering : Engineers use projectile motion principles to design artillery and rockets. They account for factors like terrain, wind effects, and the desired range to ensure accuracy. For example: Artillery shells are launched at specific angles to hit targets at known distances. Rockets are launched with precise trajectories to reach their destinations. Astrophysics : In space exploration, spacecraft trajectories are calculated using projectile motion principles. However, these calculations also account for variable gravitational forces and drag. For example: A Mars rover's landing trajectory is carefully planned to ensure a safe descent. Satellites are launched into orbit using similar principles, with adjustments for Earth's curvature and atmosphere. Trajectory Example The trajectory for an object launched with an initial velocity of \\( \\(v_0 = 20 \\, \\text{m/s}\\) \\) at an angle of \\( \\(\\theta = 45^\\circ\\) \\) is shown below: The parabolic path demonstrates the interplay between horizontal and vertical motion: - The horizontal motion is uniform, with a constant velocity. - The vertical motion is accelerated due to gravity, resulting in a curved path. 4. Implementation The following Python script simulates and visualizes the range and trajectory of a projectile. It calculates the range for various angles of projection and plots the trajectory for a specific case. ```python import numpy as np import matplotlib.pyplot as plt Parameters g = 9.8 # Acceleration due to gravity (m/s^2) v0_values = [10, 20, 30] # Initial velocities (m/s) theta_deg = np.linspace(0, 90, 91) # Angles from 0\u00b0 to 90\u00b0 theta_rad = np.deg2rad(theta_deg) Range function def range_projectile(v0, theta, g): return (v0**2 * np.sin(2 * theta)) / g Compute ranges for different initial velocities ranges = {v0: range_projectile(v0, theta_rad, g) for v0 in v0_values} Plot Range vs Angle plt.figure(figsize=(10, 6)) for v0, R in ranges.items(): plt.plot(theta_deg, R, label=f'v0 = {v0} m/s') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (meters)') plt.title('Range vs. Angle of Projection') plt.legend() plt.grid(True) plt.show() Trajectory for v0 = 20 m/s and \u03b8 = 45\u00b0 v0 = 20 # Initial velocity (m/s) theta = np.deg2rad(45) # Launch angle (radians) t_flight = (2 * v0 * np.sin(theta)) / g # Total flight time t = np.linspace(0, t_flight, 100) # Time intervals Compute trajectory x = v0 * np.cos(theta) * t # Horizontal position y = v0 * np.sin(theta) * t - 0.5 * g * t**2 # Vertical position Plot trajectory plt.figure(figsize=(10, 6)) plt.plot(x, y, label='Trajectory (v0 = 20 m/s, \u03b8 = 45\u00b0)') plt.xlabel('Horizontal Distance (m)') plt.ylabel('Height (m)') plt.title('Projectile Trajectory') plt.legend() plt.grid(True) plt.show()","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"Projectile motion is a fundamental concept in physics that describes the motion of an object launched into the air under the influence of gravity. This motion is characterized by a parabolic trajectory , and it is widely applicable in sports, engineering, and astrophysics.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#what-is-projectile-motion","text":"Projectile motion occurs when an object is launched with an initial velocity \\( \\(v_0\\) \\) at an angle \\( \\(\\theta\\) \\) to the horizontal. The motion is influenced only by gravity \\( \\(g\\) \\) , assuming no air resistance. The motion can be broken into two independent components: Horizontal Motion : The horizontal velocity remains constant because there is no horizontal acceleration. The horizontal position at time \\( \\(t\\) \\) is given by: $$ x(t) = v_0 \\cos(\\theta) \\cdot t $$ Vertical Motion : The vertical velocity decreases due to the acceleration caused by gravity. The vertical position at time \\( \\(t\\) \\) is given by: $$ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$","title":"What is Projectile Motion?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#key-equations","text":"Time of Flight : The total time the projectile spends in the air is: $$ T = \\frac{2 v_0 \\sin(\\theta)}{g} $$ Range : The horizontal distance traveled by the projectile is: $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ Maximum Height : The highest point reached by the projectile is: $$ H = \\frac{v_0^2 \\sin^2(\\theta)}{2g} $$","title":"Key Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#how-does-the-range-depend-on-the-angle-of-projection","text":"The range \\( \\(R\\) \\) depends on: - Initial Velocity ( ( \\(v_0\\) \\) ) : The range increases quadratically with \\( \\(v_0\\) \\) ( \\( \\(R \\propto v_0^2\\) \\) ). - Angle of Projection ( ( \\(\\theta\\) \\) ) : The range is maximized at \\( \\(\\theta = 45^\\circ\\) \\) . - Gravitational Acceleration ( ( \\(g\\) \\) ) : The range decreases as \\( \\(g\\) \\) increases ( \\( \\(R \\propto 1/g\\) \\) ).","title":"How Does the Range Depend on the Angle of Projection?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#key-observations","text":"The range is symmetric: $$ R(\\theta) = R(90^\\circ - \\theta) $$ For example, the range at \\( \\(\\theta = 30^\\circ\\) \\) is the same as at \\( \\(\\theta = 60^\\circ\\) \\) . The maximum range occurs at \\( \\(\\theta = 45^\\circ\\) \\) for flat terrain.","title":"Key Observations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#python-visualization-range-vs-angle","text":"The following Python code generates a graph showing how the range varies with the angle of projection for different initial velocities: ```bash python Problem_1simulation.py","title":"Python Visualization: Range vs. Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#real-world-scenarios","text":"Projectile motion has numerous real-world applications across various fields: Sports : In sports like soccer and golf, players adjust the angle of projection ( \\( \\(\\theta\\) \\) ) and the initial velocity ( \\( \\(v_0\\) \\) ) to achieve optimal range or height. For example: A soccer player might aim for a higher angle to clear a wall of defenders. A golfer adjusts the angle and velocity to maximize the distance of a drive. Engineering : Engineers use projectile motion principles to design artillery and rockets. They account for factors like terrain, wind effects, and the desired range to ensure accuracy. For example: Artillery shells are launched at specific angles to hit targets at known distances. Rockets are launched with precise trajectories to reach their destinations. Astrophysics : In space exploration, spacecraft trajectories are calculated using projectile motion principles. However, these calculations also account for variable gravitational forces and drag. For example: A Mars rover's landing trajectory is carefully planned to ensure a safe descent. Satellites are launched into orbit using similar principles, with adjustments for Earth's curvature and atmosphere.","title":"Real-World Scenarios"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#trajectory-example","text":"The trajectory for an object launched with an initial velocity of \\( \\(v_0 = 20 \\, \\text{m/s}\\) \\) at an angle of \\( \\(\\theta = 45^\\circ\\) \\) is shown below: The parabolic path demonstrates the interplay between horizontal and vertical motion: - The horizontal motion is uniform, with a constant velocity. - The vertical motion is accelerated due to gravity, resulting in a curved path.","title":"Trajectory Example"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation","text":"The following Python script simulates and visualizes the range and trajectory of a projectile. It calculates the range for various angles of projection and plots the trajectory for a specific case. ```python import numpy as np import matplotlib.pyplot as plt","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#parameters","text":"g = 9.8 # Acceleration due to gravity (m/s^2) v0_values = [10, 20, 30] # Initial velocities (m/s) theta_deg = np.linspace(0, 90, 91) # Angles from 0\u00b0 to 90\u00b0 theta_rad = np.deg2rad(theta_deg)","title":"Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-function","text":"def range_projectile(v0, theta, g): return (v0**2 * np.sin(2 * theta)) / g","title":"Range function"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#compute-ranges-for-different-initial-velocities","text":"ranges = {v0: range_projectile(v0, theta_rad, g) for v0 in v0_values}","title":"Compute ranges for different initial velocities"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#plot-range-vs-angle","text":"plt.figure(figsize=(10, 6)) for v0, R in ranges.items(): plt.plot(theta_deg, R, label=f'v0 = {v0} m/s') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (meters)') plt.title('Range vs. Angle of Projection') plt.legend() plt.grid(True) plt.show()","title":"Plot Range vs Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#trajectory-for-v0-20-ms-and-45","text":"v0 = 20 # Initial velocity (m/s) theta = np.deg2rad(45) # Launch angle (radians) t_flight = (2 * v0 * np.sin(theta)) / g # Total flight time t = np.linspace(0, t_flight, 100) # Time intervals","title":"Trajectory for v0 = 20 m/s and \u03b8 = 45\u00b0"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#compute-trajectory","text":"x = v0 * np.cos(theta) * t # Horizontal position y = v0 * np.sin(theta) * t - 0.5 * g * t**2 # Vertical position","title":"Compute trajectory"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#plot-trajectory","text":"plt.figure(figsize=(10, 6)) plt.plot(x, y, label='Trajectory (v0 = 20 m/s, \u03b8 = 45\u00b0)') plt.xlabel('Horizontal Distance (m)') plt.ylabel('Height (m)') plt.title('Projectile Trajectory') plt.legend() plt.grid(True) plt.show()","title":"Plot trajectory"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Investigating the Dynamics of a Forced Damped Pendulum 1. Introduction A forced damped pendulum is a fascinating physical system that reveals how simple components\u2014like a swinging weight\u2014can produce complex behaviors. Imagine a playground swing: left alone, it slows down due to air resistance (damping); push it rhythmically, and it keeps going (forcing). This interplay creates a rich mix of motion, from smooth swings to wild, unpredictable chaos. 2. Theoretical Foundation The motion of a forced damped pendulum is governed by the following differential equation: \\[ \\frac{d^2\\theta}{dt^2} + \\frac{b}{m} \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin(\\theta) = A \\cos(\\omega t) \\] Where: - \\( \\(\\theta\\) \\) : Angle from vertical (in radians). - \\( \\(\\frac{d^2\\theta}{dt^2}\\) \\) : Angular acceleration. - \\( \\(\\frac{b}{m} \\frac{d\\theta}{dt}\\) \\) : Damping force proportional to angular velocity. - \\( \\(\\frac{g}{L} \\sin(\\theta)\\) \\) : Restoring force due to gravity. - \\( \\(A \\cos(\\omega t)\\) \\) : External forcing term. 3. Python Simulation Below is the Python code to simulate the motion of the forced damped pendulum. The simulation includes: 1. A time series plot showing the angle of the pendulum over time. 2. A phase diagram showing the relationship between angle and angular velocity. ```python Import necessary libraries import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp Define the forced damped pendulum equation def forced_damped_pendulum(t, y, b, m, g, L, A, omega): theta, omega_dot = y dtheta_dt = omega_dot domega_dt = -(b/m) * omega_dot - (g/L) * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] Parameters m = 1.0 # Mass (kg) b = 0.5 # Damping coefficient g = 9.81 # Gravity (m/s\u00b2) L = 1.0 # Length of pendulum (m) A = 1.2 # Forcing amplitude omega = 1.5 # Forcing frequency y0 = [np.pi / 4, 0] # Initial angle = 45\u00b0, velocity = 0 Time setup t_span = (0, 20) # Simulate for 20 seconds t_eval = np.linspace(*t_span, 1000) # Time points for evaluation Solve the differential equation sol = solve_ivp(forced_damped_pendulum, t_span, y0, t_eval=t_eval, args=(b, m, g, L, A, omega)) Plotting the results plt.figure(figsize=(12, 8)) Time series plot (angle vs. time) plt.subplot(2, 1, 1) plt.plot(sol.t, sol.y[0], label=\"Angle (\u03b8)\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.title(\"Motion of a Forced Damped Pendulum\") plt.legend() plt.grid(True) Phase diagram (angle vs. angular velocity) plt.subplot(2, 1, 2) plt.plot(sol.y[0], sol.y[1], label=\"Phase Space\") plt.xlabel(\"Angle (\u03b8)\") plt.ylabel(\"Angular Velocity (\u03c9)\") plt.title(\"Phase Diagram\") plt.legend() plt.grid(True) plt.tight_layout() plt.show() Experiment: Simulate chaotic motion with larger forcing amplitude A_chaos = 5.0 # Larger forcing amplitude for chaos sol_chaos = solve_ivp(forced_damped_pendulum, t_span, y0, t_eval=t_eval, args=(b, m, g, L, A_chaos, omega)) Plot chaotic motion plt.figure(figsize=(10, 6)) plt.plot(sol_chaos.t, sol_chaos.y[0], label=\"Chaotic Motion (A = 5.0)\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.title(\"Chaotic Motion of a Forced Damped Pendulum\") plt.legend() plt.grid(True) plt.show()","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-introduction","text":"A forced damped pendulum is a fascinating physical system that reveals how simple components\u2014like a swinging weight\u2014can produce complex behaviors. Imagine a playground swing: left alone, it slows down due to air resistance (damping); push it rhythmically, and it keeps going (forcing). This interplay creates a rich mix of motion, from smooth swings to wild, unpredictable chaos.","title":"1. Introduction"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-theoretical-foundation","text":"The motion of a forced damped pendulum is governed by the following differential equation: \\[ \\frac{d^2\\theta}{dt^2} + \\frac{b}{m} \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin(\\theta) = A \\cos(\\omega t) \\] Where: - \\( \\(\\theta\\) \\) : Angle from vertical (in radians). - \\( \\(\\frac{d^2\\theta}{dt^2}\\) \\) : Angular acceleration. - \\( \\(\\frac{b}{m} \\frac{d\\theta}{dt}\\) \\) : Damping force proportional to angular velocity. - \\( \\(\\frac{g}{L} \\sin(\\theta)\\) \\) : Restoring force due to gravity. - \\( \\(A \\cos(\\omega t)\\) \\) : External forcing term.","title":"2. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-python-simulation","text":"Below is the Python code to simulate the motion of the forced damped pendulum. The simulation includes: 1. A time series plot showing the angle of the pendulum over time. 2. A phase diagram showing the relationship between angle and angular velocity. ```python","title":"3. Python Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#import-necessary-libraries","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp","title":"Import necessary libraries"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#define-the-forced-damped-pendulum-equation","text":"def forced_damped_pendulum(t, y, b, m, g, L, A, omega): theta, omega_dot = y dtheta_dt = omega_dot domega_dt = -(b/m) * omega_dot - (g/L) * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt]","title":"Define the forced damped pendulum equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameters","text":"m = 1.0 # Mass (kg) b = 0.5 # Damping coefficient g = 9.81 # Gravity (m/s\u00b2) L = 1.0 # Length of pendulum (m) A = 1.2 # Forcing amplitude omega = 1.5 # Forcing frequency y0 = [np.pi / 4, 0] # Initial angle = 45\u00b0, velocity = 0","title":"Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#time-setup","text":"t_span = (0, 20) # Simulate for 20 seconds t_eval = np.linspace(*t_span, 1000) # Time points for evaluation","title":"Time setup"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#solve-the-differential-equation","text":"sol = solve_ivp(forced_damped_pendulum, t_span, y0, t_eval=t_eval, args=(b, m, g, L, A, omega))","title":"Solve the differential equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#plotting-the-results","text":"plt.figure(figsize=(12, 8))","title":"Plotting the results"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#time-series-plot-angle-vs-time","text":"plt.subplot(2, 1, 1) plt.plot(sol.t, sol.y[0], label=\"Angle (\u03b8)\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.title(\"Motion of a Forced Damped Pendulum\") plt.legend() plt.grid(True)","title":"Time series plot (angle vs. time)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#phase-diagram-angle-vs-angular-velocity","text":"plt.subplot(2, 1, 2) plt.plot(sol.y[0], sol.y[1], label=\"Phase Space\") plt.xlabel(\"Angle (\u03b8)\") plt.ylabel(\"Angular Velocity (\u03c9)\") plt.title(\"Phase Diagram\") plt.legend() plt.grid(True) plt.tight_layout() plt.show()","title":"Phase diagram (angle vs. angular velocity)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#experiment-simulate-chaotic-motion-with-larger-forcing-amplitude","text":"A_chaos = 5.0 # Larger forcing amplitude for chaos sol_chaos = solve_ivp(forced_damped_pendulum, t_span, y0, t_eval=t_eval, args=(b, m, g, L, A_chaos, omega))","title":"Experiment: Simulate chaotic motion with larger forcing amplitude"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#plot-chaotic-motion","text":"plt.figure(figsize=(10, 6)) plt.plot(sol_chaos.t, sol_chaos.y[0], label=\"Chaotic Motion (A = 5.0)\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.title(\"Chaotic Motion of a Forced Damped Pendulum\") plt.legend() plt.grid(True) plt.show()","title":"Plot chaotic motion"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}